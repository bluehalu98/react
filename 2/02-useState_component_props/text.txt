■ state 관리
  ● useState() 훅스를 사용한다
    - state 변수는 변경시 화면이 바뀐다.(렌더링)
    - 사용예시
      import { useState } from 'react'; //useState import하고 시작한다
      let [_n,_changeN] = useState(0) // n은 바뀌면 화면이 바뀐다, changeN은 n을 바꾸는 함수, 0은 초기값 => n을 바꾸고싶으면 changeN이라는 함수로만 변경
    - 주의사항
      state변수 변경시 함수안에서 state변수 그자체 값을 사용하면 안된다
      _changeN(_n++)이런식으로 변경 금지!!!
      => let n = _n + 1; _changeN(n)

■ state와 컴포넌트 렌더링
  ● 렌더링 문제
    - state 값이 변경 시 해당 state를 사용하는 컴포넌트 전체가 리렌더링된다.
  ● 해결방안
    - state별로 컴포넌트를 별도로 제작한다

■ useRef
  ● useRef() 훅스를 사용한다
    - 요소나 변수를 참조할 수 있는 훅스
    - 사용단계
      1. 선언
        import { useRef } from 'react';
      2. 연결
        <input ref={refInput} type='number'/>
      3. 호출
        refInput.current

■ 컴포넌트 제작
  ● 컴포넌트 제작
    - js, jsx 확장자의 파일을 별도로 생성후 컴포넌트 이름의 함수를 만들고 export한다.(rsc + tab)
  ● 컴포넌트 호출
    - import를 이용해 컴포넌트 함수를 호출
    - 원하는 위치에 jsx문법으로 삽입

■ props
  ● 부모 컴퍼넌트의 state혹은 변수, 함수등을 자식 컴포넌트가 사용할 수 있도록 전달
  ● 사용법
    1. 부모가 자식에게 전달
      컨포넌트 호출시 임의의 속성값으로 전달
      예시) <Comp a={n} /> // n이라는 부모의 변수를 자식에게 a로 전달해준다
    2. 자식이 부모로부터 전달 받는다
      함수의 파라미터로 props를 구조분해한 후 사용
      예시)
       const CompN1 = ({a}) => {
          return (
            <span>
              {a}
            </span>
          );
        };